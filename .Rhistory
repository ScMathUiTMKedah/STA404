setwd("E:/20214/MAT402/Assessment")
setwd("D:/R/Training/workshop/Introduction to Quarto")
setwd("D:/R/eRES")
require(pdftools)
require(tidyverse)
require(ggplot2)
require(pdftools)
require(tidyverse)
require(ggplot2)
require(tabulizer)
# Create vectors with the survey results for each city
cityA <- c(50, 20, 15, 10, 5)
cityB <- c(40, 25, 20, 10, 5)
modes <- c("Drove", "Walked", "Public Transit", "Cycled", "Other")
# Create the pie charts for each city
chart6 <- pie(cityA, labels = modes, col = rainbow(length(cityA)),
main = "City A")
chart7 <- pie(cityB, labels = modes, col = rainbow(length(cityB)),
main = "City B")
chart6
chart6 <- pie(cityA, labels = modes, col = rainbow(length(cityA)),
main = "City A")
pie(cityA, labels = modes, col = rainbow(length(cityA)),
main = "City A")
par(mfrow=c(1,2))
pie(cityA, labels = modes, col = rainbow(length(cityA)), main = "City A")
pie(cityB, labels = modes, col = rainbow(length(cityB)), main = "City B")
# Example scatter plot
library(ggplot2)
data(mtcars)
ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point()
# Example correlation calculation
cor(mtcars$wt, mtcars$mpg)
# Example linear regression
model <- lm(mpg ~ wt, data = mtcars)
summary(model)
# Example least square method
x <- mtcars$wt
y <- mtcars$mpg
x_bar <- mean(x)
y_bar <- mean(y)
beta1 <- sum((x - x_bar) * (y - y_bar)) / sum((x - x_bar)^2)
beta0 <- y_bar - beta1 * x_bar
cat("Slope (beta1):", beta1, "\n")
cat("Intercept (beta0):", beta0, "\n")
# Example coefficient of determination
y_pred <- beta0 + beta1 * x
SSE <- sum((y - y_pred)^2)
SST <- sum((y - y_bar)^2)
R2 <- 1 - SSE / SST
cat("Coefficient of determination (R2):", R2, "\n")
# Example residual plot
plot(model, which = 1)
# Example hypothesis testing
t.test(model$coefficients[2], alternative = "two.sided")
# Example confidence intervals
confint(model)
model$coefficients
model$coefficients[2]
# Example hypothesis testing
t.test(model$coefficients[2], alternative = "two.sided")
# Example hypothesis testing
t.test(mpg ~ wt, alternative = "two-sided")
# Example hypothesis testing
t.test(y ~ x, alternative = "two-sided")
# Example hypothesis testing
t.test(y ~ x, alternative = "two.sided")
# Example hypothesis testing
t.test(model$coefficients[2], alternative = "two.sided")
# Example hypothesis testing
# t.test(model$coefficients[2], alternative = "two.sided")
t.test(mpg ~ wt, data = mtcars)
# Example hypothesis testing
t.test(model$coefficients[2]=0, alternative = "two.sided")
# Example hypothesis testing
t.test(model$coefficients[2], alternative = "two.sided")
# Example hypothesis testing
# t.test(model$coefficients[2], alternative = "two.sided")
linearHypothesis(model, "x = 0")
library(car)
# Example hypothesis testing
# t.test(model$coefficients[2], alternative = "two.sided")
linearHypothesis(model, "x = 0")
library(car)
# Example hypothesis testing
# t.test(model$coefficients[2], alternative = "two.sided")
linearHypothesis(model, "x = 1")
library(car)
# Example hypothesis testing
# t.test(model$coefficients[2], alternative = "two.sided")
linearHypothesis(model, "wt = 1")
library(car)
# Example hypothesis testing
# t.test(model$coefficients[2], alternative = "two.sided")
linearHypothesis(model, "wt = 0")
library(car)
# Example hypothesis testing
t.test(model, alternative = "two.sided")
library(car)
# Example hypothesis testing
t.test(model$coefficients[1], alternative = "two.sided")
library(car)
# Example hypothesis testing
t.test(model$coefficients[2], alternative = "two.sided")
# Example hypothesis testing
t.test(model$coefficients[2], alternative = "two.sided")
tinytex::tlmgr_update()
knitr::opts_chunk$set(echo = TRUE)
# Data
diet_a <- c(2, 3, 1, 4, 2, 3, 3, 2, 1, 3, 2, 4, 1, 2, 3)
diet_b <- c(1, 2, 3, 1, 2, 3, 2, 1, 2, 1, 2)
diet_c <- c(3, 2, 1, 3, 2, 1, 2, 1, 2, 1, 3, 2, 1)
# Combine data into a single vector
weight_loss <- c(diet_a, diet_b, diet_c)
# Group labels
groups <- factor(rep(c("Diet A", "Diet B", "Diet C"), times = c(length(diet_a), length(diet_b), length(diet_c))))
# Boxplot
boxplot(weight_loss ~ groups, main = "Weight Loss by Diet Group", xlab = "Diet Group", ylab = "Weight Loss")
# One-way ANOVA
anova_result <- aov(weight_loss ~ groups)
# Summary of the ANOVA
anova_summary <- summary(anova_result)
# Extract F-statistic and p-value
f_statistic <- anova_summary[[1]][[1]]
p_value <- anova_summary[[1]][[5]]
# Set significance level
alpha <- 0.05
# Calculate critical value
critical_value <- qf(1 - alpha, df1 = anova_result$`Df`, df2 = anova_result$`Df Residuals`)
# Extract F-statistic and p-value
f_statistic <- anova_summary[[1]][[1]]
p_value <- anova_summary[[1]][[5]]
# Set significance level
alpha <- 0.05
# Calculate critical value
critical_value <- qr(1 - alpha, df1 = anova_result$`Df`, df2 = anova_result$`Df Residuals`)
# Compare calculated F-statistic with critical value
if (f_statistic > critical_value) {
decision <- "Reject H0"
} else {
decision <- "Fail to reject H0"
}
# Print results
cat("F-statistic:", f_statistic, "\n")
cat("p-value:", p_value, "\n")
cat("Critical value:", critical_value, "\n")
knitr::opts_chunk$set(echo = TRUE)
# One-way ANOVA
anova_result <- aov(weight_loss ~ groups)
# Data
diet_a <- c(2, 3, 1, 4, 2, 3, 3, 2, 1, 3, 2, 4, 1, 2, 3)
diet_b <- c(1, 2, 3, 1, 2, 3, 2, 1, 2, 1, 2)
diet_c <- c(3, 2, 1, 3, 2, 1, 2, 1, 2, 1, 3, 2, 1)
# Combine data into a single vector
weight_loss <- c(diet_a, diet_b, diet_c)
# Group labels
groups <- factor(rep(c("Diet A", "Diet B", "Diet C"), times = c(length(diet_a), length(diet_b), length(diet_c))))
# Boxplot
boxplot(weight_loss ~ groups, main = "Weight Loss by Diet Group", xlab = "Diet Group", ylab = "Weight Loss")
# One-way ANOVA
anova_result <- aov(weight_loss ~ groups)
# Summary of the ANOVA
anova_summary <- summary(anova_result)
anova_result$df.residual
anova_summary
anova_summary$`Df`
anova_result
anova_result$residuals
anova_result$residuals
anova_result$df.residual
anova_result$assign
anova_result$coefficients
anova_result$effects
anova_result$rank
anova_result$fitted.values
anova_result$call
anova_result$terms
anova_result$df.residual[1]
anova_result$df.residual[2]
anova_result$df.residual[0]
anova_summary[[2][1]]
anova_summary[[2]][[1]]
anova_summary[[1]][[1]]
anova_summary[[1]]
anova_summary[[1]][[2]]
anova_summary[[1,1]]
anova_summary[[1;1]]
anova_summary[[1]][[1]]
anova_summary[[0]][[1]]
anova_summary[[1]][[0]]
anova_summary[[1]][[2]]
anova_summary[[1]][[3]]
anova_summary[[1]][[4]]
anova_result$`Df Residuals`
anova_result$Df
anova_result$`Df`
anova_summary$Df
anova_summary$Df[1]
anova_summary$Df[1:2]
# One-way ANOVA
anova_result <- aov(weight_loss ~ groups)
# Summary of the ANOVA
anova_summary <- summary(anova_result)
anova_summary
anova_summary$`Df`
anova_summary[1]
anova_summary[2]
anova_summary[0]
anova_summary[1,1]
anova_summary[1:1]
anova_summary[1:2]
anova_summary[2:1]
anova_summary[[1]]
anova_summary[[1]][[2]]
anova_summary[[1]][[1]]
anova_summary[[1]][[1:1]]
anova_summary[[1]][[1:0]]
anova_summary[[1]][[1]][[1]]
anova_summary[[1]][[1]][[2]]
# Extract F-statistic and p-value
f_statistic <- anova_summary[[1]][[1]]
p_value <- anova_summary[[1]][[5]]
# Set significance level
alpha <- 0.05
# Calculate critical value
critical_value <- qf(1 - alpha, df1 = anova_summary[[1]][[1]][[1]], df2 = anova_summary[[1]][[1]][[2]])
# Compare calculated F-statistic with critical value
if (f_statistic > critical_value) {
decision <- "Reject H0"
} else {
decision <- "Fail to reject H0"
}
# Print results
cat("F-statistic:", f_statistic, "\n")
cat("p-value:", p_value, "\n")
cat("Critical value:", critical_value, "\n")
cat("Decision:", decision, "\n")
?TukeyHSD
anova_result
knitr::opts_chunk$set(echo = TRUE)
# Pairwise comparisons using Tukey's HSD test
pairwise_result <- TukeyHSD(anova_result)
# Confidence intervals for pairwise comparisons
confidence_intervals <- confint(pairwise_result)
pairwise_result
?vcov
?confint
# Pairwise comparisons using Tukey's HSD test
pairwise_result <- TukeyHSD(anova_result)
# Confidence intervals for pairwise comparisons
confidence_intervals <- confint(anova_result)
# confidence_intervals <- confint(pairwise_result)
# Print confidence intervals
confidence_intervals
# Pairwise comparisons using Tukey's HSD test
pairwise_result <- Tukey(anova_result)
# Pairwise comparisons using Tukey's HSD test
pairwise_result <- TukeyHSD(anova_result)
# Confidence intervals for pairwise comparisons
# confidence_intervals <- confint(anova_result)
confidence_intervals <- confint(pairwise_result)
confint(pairwise_result)
confint(TukeyHSD(anova_result))
confint(TukeyHSD(anova_summary))
# Load the required libraries
library(tidyr)
library(dplyr)
library(broom)
# Define the sample data
diet_a <- c(2, 3, 1, 4, 2, 3, 3, 2, 1, 3, 2, 4, 1, 2, 3)
diet_b <- c(1, 2, 3, 1, 2, 3, 2, 1, 2, 1, 2)
diet_c <- c(3, 2, 1, 3, 2, 1, 2, 1, 2, 1, 3, 2, 1)
# Combine the data into a data frame
data <- data.frame(
diet = factor(rep(c("A", "B", "C"),
c(length(diet_a), length(diet_b), length(diet_c)))),
weight_loss = c(diet_a, diet_b, diet_c)
)
# One-way ANOVA
model <- aov(weight_loss ~ diet, data = data)
# Calculate the SSB, SSW, and SST
SSB <- sum(model$fit$residuals^2) # Sum of Squares Between
model
model$fitted.values
model$residuals
model$coefficients
